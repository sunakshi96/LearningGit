=============================================
Gits commits Across various files
+++++++++++++++++++++++++++++++++++++++++++++

git log --stat::
to view  clog of commits with addition of lines and deletions lines in the edited files.
--------------------------------------------------------------------------------------

GIT ERRORS AND WARNINGS
-----------------------
Should not be doing an octopus::Octopus is a strategy that Git uses to combine different versions of code together. This message can be used if you use this strategy in an inappropriate condition.

You are in a 'detached head state'::
HEAD is what Git calls the commit you are currently on. You can "detach" the HEAD by switching to a previous commit. Despite of what it sounds like, it is not a bad thing to detach the HEAD. Git just warns you so that you ll realize what you are doing it.

Panic! The impossible happened::
This is a real error message, but it is not the output of GIT. Instead it is the output of GHC, the compiler for a programming language called Haskell. It is reserved for particularly surprising errors!
_______________________________________________________________________________________________________________________
BEHAVIOR OF GIT CHECKOUT

Checking out an earlier commit will change the state of at least one file.

This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. However, it's possible to do the following:

    Save a commit (call this commit 1).
    Update some files and save another commit (call this commit 2).
    Change all the files back to their state during commit 1, then save again (call this commit 3).

This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, then figure out how to safely reintroduce the changes later.

At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed.

Checking out an earlier commit will change the state of more than one file.

Checking out an earlier commit will change the state of every file in the repository.

Both of these are sometimes true. Since each commit tracks the state of all files in the repository, it is possible that checking out an earlier commit will change the state of multiple files, or even all the files in the repository. However, it is possible to save a new commit after changing only one file, so it is possible only one file will change.

After checking out a commit, the state of all the files in the repository will be from the same point in time.

This is always true. A commit saves a snapshot of all files in the repository at the time the commit was made, so checking out an earlier commit will result in all the files being reverted to their state at the time the commit was made. That is, the files will be in a consistent state.

